function [points, triangles, normals, num_points, num_triangles, num_normals] = Import_PLY(filename, bool_plot)
%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Edoardo\Documents\MATLAB\pot.shl
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2014/01/25 11:52:51

%% Initialize variables.
%filename = 'C:\Users\Edoardo\Documents\MATLAB\pot.shl';
delimiter = ' ';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                nuplymericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with 0.0
R = cellfun(@(x) (~isnumeric(x) && ~islogical(x)) || isnan(x),raw); % Find non-numeric cells
raw(R) = {0.0}; % Replace non-numeric cells

%% Allocate imported array to column variable names
VarName1 = cell2mat(raw(:, 1));
VarName2 = cell2mat(raw(:, 2));
VarName3 = cell2mat(raw(:, 3));
VarName4 = cell2mat(raw(:, 4));
VarName5 = cell2mat(raw(:, 5));
VarName6 = cell2mat(raw(:, 6));

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;

%% Clear temporary variables

num_points = VarName3(3);
num_triangles  =  VarName3(10);
num_normals = num_points ;
%
points = [VarName1(13:num_points+12), ...
          VarName2(13:num_points+12),...
          VarName3(13:num_points+12) ];
      %
triangles = [VarName2(13+num_points : 12+num_points+num_triangles ),...
             VarName3(13+num_points : 12+num_points+num_triangles ),...
             VarName4(13+num_points : 12+num_points+num_triangles ) ];
         %
normals = [VarName4(13:num_points+12), ...
          VarName5(13:num_points+12),...
          VarName6(13:num_points+12) ];

       if bool_plot ==1        
           figure;
           plot3(points(:,1), points(:,2), points(:,3), '*');
           hold on
           quiver3(points(:,1),points(:,2), points(:,3), normals(:,1),normals(:,2),normals(:,3),.5,'g')
%            for i=1:size(triangles,1)
%                
%                triangle = [points(triangles(i,1),1), points(triangles(i,1),2), points(triangles(i,1),3);
%                    points(triangles(i,2),1), points(triangles(i,2),2), points(triangles(i,2),3);
%                    points(triangles(i,3),1), points(triangles(i,3),2), points(triangles(i,3),3);
%                    points(triangles(i,1),1), points(triangles(i,1),2), points(triangles(i,1),3)];
%                plot3(triangle(:,1), triangle(:,2), triangle(:,3))
%                %quiver3(points(i,1),points(i,2), points(i,3), normals(i,1),normals(i,2),normals(i,3),.01)
%                hold on
%            end
       end



end




