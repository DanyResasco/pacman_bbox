// Example program for the bounding_box() function for 2D points and 3D points.
#include <CGAL/Simple_cartesian.h>
#include <CGAL/bounding_box.h>
#include <vector>
#include <iostream>
typedef double                     FT;
typedef CGAL::Simple_cartesian<FT> K;
typedef K::Point_2                 Point_2;  
typedef K::Point_3                 Point_3;

int main()
{
 
  std::vector<Point_2> points_2_proj_xy;    //dichiaro vettore
  std::vector<Point_3> points_3;
 std::vector<Point_2> points_sx;
  std::vector<Point_2> points_dx;
  std::vector<Point_2> points_tieni;
  int num_points;
  std::cin >> num_points;       //li prendo dalla mesh nome_file <../nome_mesh
  float x, y, z;
  for (int i = 0; i < num_points; ++i)    //leggo i valori dalla mesh e li metto nel vettore per fare bb, intando faccio proiezione
  {
    std::cin >> x;
    std::cin >> y;
    std::cin >> z;
    points_3.push_back(Point_3(x,y,z));   //inserisci i valori in point_3 il cui tipo Ã¨ Point_3
    points_2.push_back(Point_2(x,y));
  } 


  std::cout << "Num of Points = " << points_3.size() << std::endl;

  K::Iso_cuboid_3 c3 = CGAL::bounding_box(points_3.begin(), points_3.end());      //Chiamata alla funzione bb
  std::cout << c3 << std::endl;

  std::cout << points_3[0].x() << std::endl; // mi permette di scorrere il vettore

for (int k = 0; k < points_2_proj_xy.size(); ++k) // scorro il vettore
    
{      for (int t = 0; t < points_2_proj_xy.size(); ++t)
      {
        if (points_2_proj_xy[t].y() < points_2_proj_xy[k].y()) // divido parte sinistra e destra della mesh

            points_sx.push_back(Point_2(points_2_proj_xy[t].x(), points_2_proj_xy[t].y()));  
         
          else points_dx.push_back(Point_2(points_2_proj_xy[t].x() ,points_2_proj_xy[t].y()));

      }

    K::Iso_rectangle_2 c2 = CGAL::bounding_box(points_sx.begin(), points_sx.end()); //calcolo bb del 2d
    K::Iso_rectangle_2 c1 = CGAL::bounding_box(points_dx.begin(), points_dx.end());
    std::cout << c2 << std::endl;
    std::cout << c1 << std::endl;
    std::cout << "Test area" << std::endl;
    area_sx= c2.area();   //calcolo area
    area_dx= c2.area();
    //std::cout << area_sx << std::endl;    //stampo area
    //std::cout << area_dx << std::endl;

    }







  return 0;
}